<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.4" jmeter="2.9 r1437961">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="COSA.VERSION" elementType="Argument">
            <stringProp name="Argument.name">COSA.VERSION</stringProp>
            <stringProp name="Argument.value">${__P(COSA.VERSION,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COSA.PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">COSA.PROTOCOL</stringProp>
            <stringProp name="Argument.value">${__P(COSA.PROTOCOL,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COSA.HOST" elementType="Argument">
            <stringProp name="Argument.name">COSA.HOST</stringProp>
            <stringProp name="Argument.value">${__P(COSA.HOST,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COSA.USER.NAME" elementType="Argument">
            <stringProp name="Argument.name">COSA.USER.NAME</stringProp>
            <stringProp name="Argument.value">${__P(COSA.USER.NAME,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COSA.USER.PASS" elementType="Argument">
            <stringProp name="Argument.name">COSA.USER.PASS</stringProp>
            <stringProp name="Argument.value">${__P(COSA.USER.PASS,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COSA.PORT" elementType="Argument">
            <stringProp name="Argument.name">COSA.PORT</stringProp>
            <stringProp name="Argument.value">${__P(COSA.PORT,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="set COSA.v?.THREADS" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="COSA.v1.THREADS" elementType="Argument">
            <stringProp name="Argument.name">COSA.v1.THREADS</stringProp>
            <stringProp name="Argument.value">${__javaScript( ${COSA.VERSION}==1 ? 1 : 0 ; )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COSA.v2.THREADS" elementType="Argument">
            <stringProp name="Argument.name">COSA.v2.THREADS</stringProp>
            <stringProp name="Argument.value">${__javaScript( ${COSA.VERSION}==2 ? 1 : 0 ; )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">false</boolProp>
        <boolProp name="useExpires">true</boolProp>
      </CacheManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${COSA.HOST}</stringProp>
        <stringProp name="HTTPSampler.port">${COSA.PORT}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">${COSA.PROTOCOL}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="cosa 1" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${COSA.v1.THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1381978890000</longProp>
        <longProp name="ThreadGroup.end_time">1381978890000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="user login -&gt; delete object" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="user login" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="u" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u</stringProp>
                  <stringProp name="Argument.value">${FORM.u}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pw" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pw</stringProp>
                  <stringProp name="Argument.value">${FORM.pw}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/dologin.jsp</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">zh-TW,zh;q=0.8,en-US;q=0.6,en;q=0.4</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">http://${COSA.HOST}</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.64 Safari/537.31</stringProp>
                </elementProp>
                <elementProp name="Accept-Charset" elementType="Header">
                  <stringProp name="Header.name">Accept-Charset</stringProp>
                  <stringProp name="Header.value">Big5,utf-8;q=0.7,*;q=0.3</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${COSA.HOST}/login.jsp</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="form body parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="2079517131">FORM.u</stringProp>
                <stringProp name="40521585">FORM.pw</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="129724843">
                  <stringProp name="1836088428">${COSA.USER.NAME}</stringProp>
                  <stringProp name="1837941670">${COSA.USER.PASS}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="json statuscode 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="175355001">&quot;statuscode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="set COSA.TICKET" enabled="true">
              <stringProp name="VAR">COSA.TICKET</stringProp>
              <stringProp name="JSONPATH">$.ticket</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if login ok" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get profile" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/restful/services/person/${QUERY.user}?alf_ticket=${QUERY.ticket}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="json statuscode 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="175355001">&quot;statuscode&quot;:200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="query string parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="302263633">QUERY.user</stringProp>
                  <stringProp name="-1620352238">QUERY.ticket</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="142473370">
                    <stringProp name="1836088428">${COSA.USER.NAME}</stringProp>
                    <stringProp name="-1312007404">${COSA.TICKET}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="set COSA.ROOTUID" enabled="true">
                <stringProp name="VAR">COSA.ROOTUID</stringProp>
                <stringProp name="JSONPATH">$.homeFolderNodeRef</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="set COSA.ROOTUID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">COSA.ROOTUID</stringProp>
                <stringProp name="RegexExtractor.regex">([^/]*)$</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">variable</stringProp>
                <stringProp name="Scope.variable">COSA.ROOTUID</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if get profile ok" enabled="true">
              <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <intProp name="LoopController.loops">-1</intProp>
              </LoopController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get doc lib" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"> {&#xd;
	&quot;uuid&quot;:&quot;${JSON.uuid}&quot;,&#xd;
	&quot;root&quot;:&quot;${JSON.root}&quot;,&#xd;
	&quot;pagesize&quot;:${JSON.pagesize},&#xd;
	&quot;pageindex&quot;:${JSON.pageindex},&#xd;
	&quot;sort&quot;:&quot;${JSON.sort}&quot;,&#xd;
	&quot;asc&quot;:${JSON.asc},&#xd;
	&quot;tree&quot;:${JSON.tree}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/restful/services/repository/nodesrender/paging?alf_ticket=${QUERY.ticket}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="content-type json" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="query string parameters" enabled="true">
                    <collectionProp name="UserParameters.names">
                      <stringProp name="-1620352238">QUERY.ticket</stringProp>
                    </collectionProp>
                    <collectionProp name="UserParameters.thread_values">
                      <collectionProp name="928949649">
                        <stringProp name="-1312007404">${COSA.TICKET}</stringProp>
                      </collectionProp>
                    </collectionProp>
                    <boolProp name="UserParameters.per_iteration">false</boolProp>
                  </UserParameters>
                  <hashTree/>
                  <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="json body parameters" enabled="true">
                    <collectionProp name="UserParameters.names">
                      <stringProp name="1689196801">JSON.uuid</stringProp>
                      <stringProp name="1689101864">JSON.root</stringProp>
                      <stringProp name="-1459587754">JSON.pagesize</stringProp>
                      <stringProp name="1988312605">JSON.pageindex</stringProp>
                      <stringProp name="1689131748">JSON.sort</stringProp>
                      <stringProp name="-1192455061">JSON.asc</stringProp>
                      <stringProp name="1689164004">JSON.tree</stringProp>
                    </collectionProp>
                    <collectionProp name="UserParameters.thread_values">
                      <collectionProp name="763869861">
                        <stringProp name="174203500">${COSA.ROOTUID}</stringProp>
                        <stringProp name="3569038">true</stringProp>
                        <stringProp name="1691">50</stringProp>
                        <stringProp name="49">1</stringProp>
                        <stringProp name="3560141">time</stringProp>
                        <stringProp name="97196323">false</stringProp>
                        <stringProp name="97196323">false</stringProp>
                      </collectionProp>
                    </collectionProp>
                    <boolProp name="UserParameters.per_iteration">false</boolProp>
                  </UserParameters>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="json statuscode 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="175355001">&quot;statuscode&quot;:200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="set COSA.OBJECTS" enabled="true">
                    <stringProp name="TestPlan.comments">Plugin help available here: http://jmeter-plugins.org/wiki/JSONPathExtractor</stringProp>
                    <stringProp name="VAR">COSA.OBJECTS</stringProp>
                    <stringProp name="JSONPATH">$.children</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="set COSA.OBJECTN" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">eval(&apos;var ResponseString = &apos; + prev.getResponseDataAsString());
vars.put(&quot;COSA.OBJECTN&quot;, ResponseString.children.length);
</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </BSFPostProcessor>
                  <hashTree/>
                  <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="set COSA.OBJECT.IDAR" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">eval(&apos;var ResponseString = &apos; + prev.getResponseDataAsString());

var idar=&quot;&quot;;
for (var i=0; i&lt;ResponseString.children.length; i++)
{
	idar += &quot;&apos;&quot; + ResponseString.children[i].uuid + &quot;&apos;,&quot;;
}
vars.put(&quot;COSA.OBJECT.IDAR&quot;, idar);
</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </BSFPostProcessor>
                  <hashTree/>
                  <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="stop thread if error" enabled="true">
                    <intProp name="OnError.action">1</intProp>
                  </ResultAction>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if get doc ok" enabled="true">
                  <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if doc lib -eq 0" enabled="true">
                    <stringProp name="IfController.condition">${COSA.OBJECTN} == 0</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="stop thread" enabled="true">
                      <stringProp name="BeanShellSampler.query">ctx.getThread().stop();</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if doc lib -gt 0" enabled="true">
                    <stringProp name="IfController.condition">${COSA.OBJECTN} &gt; 0</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="delete object" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&#xd;
	&quot;nodes&quot;:[${JSON.nodes}]&#xd;
}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/restful/services/node/delete?alf_ticket=${QUERY.ticket}</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="content-type json" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="query string parameters" enabled="true">
                        <collectionProp name="UserParameters.names">
                          <stringProp name="-1620352238">QUERY.ticket</stringProp>
                        </collectionProp>
                        <collectionProp name="UserParameters.thread_values">
                          <collectionProp name="928949649">
                            <stringProp name="-1312007404">${COSA.TICKET}</stringProp>
                          </collectionProp>
                        </collectionProp>
                        <boolProp name="UserParameters.per_iteration">false</boolProp>
                      </UserParameters>
                      <hashTree/>
                      <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="form body parameters" enabled="true">
                        <collectionProp name="UserParameters.names">
                          <stringProp name="818845227">JSON.nodes</stringProp>
                        </collectionProp>
                        <collectionProp name="UserParameters.thread_values">
                          <collectionProp name="1246013105">
                            <stringProp name="-1575536193">${COSA.OBJECT.IDAR}</stringProp>
                          </collectionProp>
                        </collectionProp>
                        <boolProp name="UserParameters.per_iteration">false</boolProp>
                      </UserParameters>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="json statuscode 200" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-1239777271">{&quot;statuscode&quot;:200}</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="cosa 2" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${COSA.v2.THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1381978890000</longProp>
        <longProp name="ThreadGroup.end_time">1381978890000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="load properties" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="COSA.HOST.AUTH" elementType="Argument">
              <stringProp name="Argument.name">COSA.HOST.AUTH</stringProp>
              <stringProp name="Argument.value">${__P(COSA.HOST.AUTH,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="COSA.USER.TENANT" elementType="Argument">
              <stringProp name="Argument.name">COSA.USER.TENANT</stringProp>
              <stringProp name="Argument.value">${__P(COSA.USER.TENANT,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="COSA.DEPLOY.VFS" elementType="Argument">
              <stringProp name="Argument.name">COSA.DEPLOY.VFS</stringProp>
              <stringProp name="Argument.value">${__P(COSA.DEPLOY.VFS,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="user login -&gt; delete object" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="user login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;username&quot;:&quot;${JSON.username}&quot;, &#xd;
	&quot;password&quot;:&quot;${JSON.password}&quot;, &#xd;
	&quot;tenant&quot;:&quot;${JSON.tenant}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${COSA.HOST.AUTH}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/dir/services/auth/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="json body parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="1709284124">JSON.username</stringProp>
                <stringProp name="-1102983967">JSON.password</stringProp>
                <stringProp name="-222768016">JSON.tenant</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1208909376">
                  <stringProp name="1836088428">${COSA.USER.NAME}</stringProp>
                  <stringProp name="1837941670">${COSA.USER.PASS}</stringProp>
                  <stringProp name="394753965">${COSA.USER.TENANT}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="set COSA.TICKET" enabled="true">
              <stringProp name="VAR">COSA.TICKET</stringProp>
              <stringProp name="JSONPATH">$.ticket</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if login ok" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="list share links" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${COSA.DEPLOY.VFS}/services/share_obj_ops/get_sharelinks</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${COSA.TICKET}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if list ok" enabled="false">
              <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if count &gt; 0" enabled="false">
                <stringProp name="IfController.condition"></stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <intProp name="LoopController.loops">-1</intProp>
              </LoopController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get doc lib" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"> {&#xd;
	&quot;uuid&quot;:&quot;${JSON.uuid}&quot;,&#xd;
	&quot;root&quot;:&quot;${JSON.root}&quot;,&#xd;
	&quot;pagesize&quot;:${JSON.pagesize},&#xd;
	&quot;pageindex&quot;:${JSON.pageindex},&#xd;
	&quot;sort&quot;:&quot;${JSON.sort}&quot;,&#xd;
	&quot;asc&quot;:${JSON.asc},&#xd;
	&quot;tree&quot;:${JSON.tree}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/restful/services/repository/nodesrender/paging?alf_ticket=${QUERY.ticket}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="content-type json" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="query string parameters" enabled="true">
                    <collectionProp name="UserParameters.names">
                      <stringProp name="-1620352238">QUERY.ticket</stringProp>
                    </collectionProp>
                    <collectionProp name="UserParameters.thread_values">
                      <collectionProp name="928949649">
                        <stringProp name="-1312007404">${COSA.TICKET}</stringProp>
                      </collectionProp>
                    </collectionProp>
                    <boolProp name="UserParameters.per_iteration">false</boolProp>
                  </UserParameters>
                  <hashTree/>
                  <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="json body parameters" enabled="true">
                    <collectionProp name="UserParameters.names">
                      <stringProp name="1689196801">JSON.uuid</stringProp>
                      <stringProp name="1689101864">JSON.root</stringProp>
                      <stringProp name="-1459587754">JSON.pagesize</stringProp>
                      <stringProp name="1988312605">JSON.pageindex</stringProp>
                      <stringProp name="1689131748">JSON.sort</stringProp>
                      <stringProp name="-1192455061">JSON.asc</stringProp>
                      <stringProp name="1689164004">JSON.tree</stringProp>
                    </collectionProp>
                    <collectionProp name="UserParameters.thread_values">
                      <collectionProp name="763869861">
                        <stringProp name="174203500">${COSA.ROOTUID}</stringProp>
                        <stringProp name="3569038">true</stringProp>
                        <stringProp name="1691">50</stringProp>
                        <stringProp name="49">1</stringProp>
                        <stringProp name="3560141">time</stringProp>
                        <stringProp name="97196323">false</stringProp>
                        <stringProp name="97196323">false</stringProp>
                      </collectionProp>
                    </collectionProp>
                    <boolProp name="UserParameters.per_iteration">false</boolProp>
                  </UserParameters>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="json statuscode 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="175355001">&quot;statuscode&quot;:200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="set COSA.OBJECTS" enabled="true">
                    <stringProp name="TestPlan.comments">Plugin help available here: http://jmeter-plugins.org/wiki/JSONPathExtractor</stringProp>
                    <stringProp name="VAR">COSA.OBJECTS</stringProp>
                    <stringProp name="JSONPATH">$.children</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="set COSA.OBJECTN" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">eval(&apos;var ResponseString = &apos; + prev.getResponseDataAsString());
vars.put(&quot;COSA.OBJECTN&quot;, ResponseString.children.length);
</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </BSFPostProcessor>
                  <hashTree/>
                  <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="set COSA.OBJECT.IDAR" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">eval(&apos;var ResponseString = &apos; + prev.getResponseDataAsString());

var idar=&quot;&quot;;
for (var i=0; i&lt;ResponseString.children.length; i++)
{
	idar += &quot;&apos;&quot; + ResponseString.children[i].uuid + &quot;&apos;,&quot;;
}
vars.put(&quot;COSA.OBJECT.IDAR&quot;, idar);
</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </BSFPostProcessor>
                  <hashTree/>
                  <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="stop thread if error" enabled="true">
                    <intProp name="OnError.action">1</intProp>
                  </ResultAction>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if get doc ok" enabled="true">
                  <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if doc lib -eq 0" enabled="true">
                    <stringProp name="IfController.condition">${COSA.OBJECTN} == 0</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="stop thread" enabled="true">
                      <stringProp name="BeanShellSampler.query">ctx.getThread().stop();</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if doc lib -gt 0" enabled="true">
                    <stringProp name="IfController.condition">${COSA.OBJECTN} &gt; 0</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="delete object" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&#xd;
	&quot;nodes&quot;:[${JSON.nodes}]&#xd;
}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">/restful/services/node/delete?alf_ticket=${QUERY.ticket}</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="content-type json" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="query string parameters" enabled="true">
                        <collectionProp name="UserParameters.names">
                          <stringProp name="-1620352238">QUERY.ticket</stringProp>
                        </collectionProp>
                        <collectionProp name="UserParameters.thread_values">
                          <collectionProp name="928949649">
                            <stringProp name="-1312007404">${COSA.TICKET}</stringProp>
                          </collectionProp>
                        </collectionProp>
                        <boolProp name="UserParameters.per_iteration">false</boolProp>
                      </UserParameters>
                      <hashTree/>
                      <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="form body parameters" enabled="true">
                        <collectionProp name="UserParameters.names">
                          <stringProp name="818845227">JSON.nodes</stringProp>
                        </collectionProp>
                        <collectionProp name="UserParameters.thread_values">
                          <collectionProp name="1246013105">
                            <stringProp name="-1575536193">${COSA.OBJECT.IDAR}</stringProp>
                          </collectionProp>
                        </collectionProp>
                        <boolProp name="UserParameters.per_iteration">false</boolProp>
                      </UserParameters>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="json statuscode 200" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-1239777271">{&quot;statuscode&quot;:200}</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">8</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="list shared objects (TODO)" enabled="false">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_TIME">0</stringProp>
              <stringProp name="LATENCY">0</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if count &gt; 0" enabled="false">
              <stringProp name="IfController.condition"></stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="${__P(user.dir)}/tmp/simple.log" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>false</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename">${__P(user.dir)}/tmp/simple.log</stringProp>
        <stringProp name="TestPlan.comments">same as result.log of non-gui mode ; enable this when in gui mode if need</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="${__P(user.dir)}/tmp/simple.err" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>false</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <url>true</url>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename">${__P(user.dir)}/tmp/simple.err</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
